# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EeO0VzYKkeBE9j-zPB1vCYkfzsf7mlEI
"""

!pip install transformers diffusers torch accelerate

import torch
from transformers import pipeline, set_seed
from diffusers import StableDiffusionPipeline
from IPython.display import display, Image
import warnings
warnings.filterwarnings("ignore")

import random

class TextGenerator:
    def __init__(self, model_name="gpt2"):
        self.generator = pipeline('text-generation', model=model_name)
        set_seed(42)

    def generate_text(self, prompt, max_length=200):
        return self.generator(prompt, max_length=max_length, num_return_sequences=1)[0]['generated_text']

    def generate_balanced_story(self, prompt, max_length=200):
        initial_story = self.generate_text(prompt, max_length)

        alternatives = [
            "The story highlights the importance of understanding different perspectives and embracing diversity.",
            "The narrative focuses on unity and collaboration, reflecting a harmonious community.",
            "This tale teaches the importance of empathy and respect among different cultures.",
            "The story showcases achievements of individuals from various backgrounds, emphasizing teamwork and friendship."
        ]

        balanced_addition = random.choice(alternatives)
        balanced_story = f"{initial_story}\n\nMoreover, {balanced_addition}"

        return balanced_story

class ImageGenerator:
    def __init__(self, model_name="runwayml/stable-diffusion-v1-5"):
        self.pipe = StableDiffusionPipeline.from_pretrained(model_name, torch_dtype=torch.float32)
        self.pipe = self.pipe.to("cpu")

    def generate_image(self, prompt):
        image = self.pipe(prompt).images[0]
        return image

class StoryGenerator:
    def __init__(self):
        self.text_gen = TextGenerator()
        self.image_gen = ImageGenerator()

    def generate_story(self, prompt):
        story = self.text_gen.generate_balanced_story(prompt)
        image = self.image_gen.generate_image(prompt)
        return story, image

def display_story(story, image):
    print("Generated Story:")
    print(story)
    print("\nGenerated Image:")
    display(image)

# Initialize the story generator
story_gen = StoryGenerator()

# Get user input
#user_prompt = input("Enter a prompt for your story: ")
user_prompt = "facebook ceo"

# Generate story and image
generated_story, generated_image = story_gen.generate_story(user_prompt)

# Display the results
display_story(generated_story, generated_image)